from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from controler import Controller  # –ò–º–ø–æ—Ä—Ç –≤–∞—à–µ–≥–æ Controller

# –°–æ–∑–¥–∞—ë–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
bot_router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Controller
controller = Controller()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–¢–∞–±–ª–∏—Ü–∞", callback_data="show_table"),
            InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="new_entry"),
        ],
        [InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instructions")]
    ])
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot_router.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WiFi Data Bot! üåê\n"
        "–Ø –ø–æ–º–æ–≥–∞—é —Å–æ–±–∏—Ä–∞—Ç—å –∏ —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ WiFi-—Å–µ—Ç—è—Ö.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:"
    )
    await message.answer(welcome_text, reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–∞–±–ª–∏—Ü–∞"
@bot_router.callback_query(F.data == "show_table")
async def show_table(callback: types.CallbackQuery):
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ WiFiDB –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ read_all() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
        records = controller.db.read_all()  # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ read_all() –≤ WiFiDB, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not records:
            await callback.message.answer("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ '–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ'.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
        table = "üìä –¢–∞–±–ª–∏—Ü–∞ WiFi-—Å–µ—Ç–µ–π:\n\n"
        table += f"{'SSID':<20} {'BSSID':<18} {'–ß–∞—Å—Ç–æ—Ç–∞':<10} {'RSSI':<8} {'–ö–∞–Ω–∞–ª':<10} {'–í—Ä–µ–º—è':<15} {'–ö–∞–ø–∞–±–∏–ª–∏—Ç–∏':<20}\n"
        table += "-" * 100 + "\n"
        for record in records:
            table += (
                f"{record['ssid'][:19]:<20} "
                f"{record['bssid']:<18} "
                f"{record['frequency']:<10} "
                f"{record['rssi']:<8} "
                f"{record['channel_bandwidth']:<10} "
                f"{record['timestamp']:<15} "
                f"{record['capabilities'][:19]:<20}\n"
            )
        await callback.message.answer(table, reply_markup=get_main_keyboard())
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ"
@bot_router.callback_query(F.data == "new_entry")
async def start_new_entry(callback: types.CallbackQuery):
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ WiFi-—Å–µ—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        '{"bssid": "00:11:22:33:44:55", "frequency": 2412, "rssi": -50, '
        '"ssid": "MyWiFi", "timestamp": 1698115200, "channel_bandwidth": "20MHz", '
        '"capabilities": "WPA2-PSK"}'
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ JSON
    await callback.message.bot.set_chat_menu_button(
        chat_id=callback.message.chat.id,
        menu_button=types.MenuButtonCommands()
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
@bot_router.message()
async def process_new_entry(message: types.Message):
    try:
        success = controller.process_payload_and_save(message.text)
        if success:
            await message.answer(
                "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É!",
                reply_markup=get_main_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç JSON.",
                reply_markup=get_main_keyboard()
            )
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ JSON: {e}", reply_markup=get_main_keyboard())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
@bot_router.callback_query(F.data == "instructions")
async def show_instructions(callback: types.CallbackQuery):
    instructions = (
        "üìö **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é WiFi Data Bot**\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–±–æ—Ä–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ WiFi-—Å–µ—Ç—è—Ö. "
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç—è—Ö, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ.\n\n"
        "**–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞:**\n"
        "- **–¢–∞–±–ª–∏—Ü–∞**: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ WiFi-—Å–µ—Ç—è—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü—ã.\n"
        "- **–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ**: –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é WiFi-—Å–µ—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.\n"
        "- **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è**: –í—ã–≤–æ–¥–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "**–ö–∞–∫ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É:**\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ'.\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "   ```json\n"
        '   {"bssid": "00:11:22:33:44:55", "frequency": 2412, "rssi": -50, '
        '   "ssid": "MyWiFi", "timestamp": 1698115200, "channel_bandwidth": "20MHz", '
        '   "capabilities": "WPA2-PSK"}\n'
        "   ```\n"
        "3. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É.\n\n"
        "**–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ:**\n"
        "- **SSID**: –ò–º—è WiFi-—Å–µ—Ç–∏.\n"
        "- **BSSID**: MAC-–∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞.\n"
        "- **–ß–∞—Å—Ç–æ—Ç–∞**: –ß–∞—Å—Ç–æ—Ç–∞ –≤ –ú–ì—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2412 –¥–ª—è 2.4 –ì–ì—Ü).\n"
        "- **RSSI**: –£—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –≤ –¥–ë–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, -50).\n"
        "- **–ö–∞–Ω–∞–ª**: –®–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20MHz).\n"
        "- **–í—Ä–µ–º—è**: –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (Unix timestamp).\n"
        "- **–ö–∞–ø–∞–±–∏–ª–∏—Ç–∏**: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, WPA2-PSK).\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç JSON –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º."
    )
    await callback.message.answer(instructions, parse_mode="Markdown", reply_markup=get_main_keyboard())
    await callback.answer()
