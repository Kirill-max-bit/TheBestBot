import logging
import textwrap
from typing import Any, Dict, List

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from controler import Controller  # –ò–º–ø–æ—Ä—Ç –≤–∞—à–µ–≥–æ Controller


# –õ–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
bot_router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Controller
controller = Controller()


def _truncate(value: str, length: int) -> str:
    """–ö–æ—Ä–æ—Ç–∫–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É—Å–µ—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫."""
    if value is None:
        return ""
    s = str(value)
    return s if len(s) <= length else s[: max(0, length - 1)] + "‚Ä¶"


def get_main_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –æ—Å–Ω–æ–≤–Ω—É—é inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–æ—Ç–∞."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–¢–∞–±–ª–∏—Ü–∞", callback_data="show_table"),
            InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="new_entry"),
        ],
        [InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instructions")]
    ])
    return keyboard


def _format_records_table(records: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É.

    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏ - —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏: ssid, bssid, frequency, rssi,
    channel_bandwidth, timestamp, capabilities.
    """
    header = (
        "üìä –¢–∞–±–ª–∏—Ü–∞ WiFi-—Å–µ—Ç–µ–π:\n\n"
        f"{'SSID':<20} {'BSSID':<18} {'–ß–∞—Å—Ç–æ—Ç–∞':<10} {'RSSI':<8} {'–ö–∞–Ω–∞–ª':<10} {'–í—Ä–µ–º—è':<15} {'–ö–∞–ø–∞–±–∏–ª–∏—Ç–∏':<20}\n"
    )
    lines = [header, "-" * 100 + "\n"]

    for rec in records:
        ssid = _truncate(rec.get("ssid", ""), 19)
        bssid = _truncate(rec.get("bssid", ""), 17)
        frequency = _truncate(rec.get("frequency", ""), 10)
        rssi = _truncate(rec.get("rssi", ""), 8)
        channel = _truncate(rec.get("channel_bandwidth", ""), 10)
        timestamp = _truncate(rec.get("timestamp", ""), 15)
        capabilities = _truncate(rec.get("capabilities", ""), 19)

        lines.append(
            f"{ssid:<20} {bssid:<18} {frequency:<10} {rssi:<8} {channel:<10} {timestamp:<15} {capabilities:<20}\n"
        )

    return "".join(lines)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot_router.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WiFi Data Bot! üåê\n"
        "–Ø –ø–æ–º–æ–≥–∞—é —Å–æ–±–∏—Ä–∞—Ç—å –∏ —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ WiFi-—Å–µ—Ç—è—Ö.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:"
    )
    await message.answer(welcome_text, reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–∞–±–ª–∏—Ü–∞"
@bot_router.callback_query(F.data == "show_table")
async def show_table(callback: types.CallbackQuery) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ –∑–∞–ø–∏—Å—è–º–∏.

    NOTE: –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –º–µ—Ç–æ–¥ `db.read_all()` –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π
    —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π-–∑–∞–ø–∏—Å–µ–π. –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç, –æ—Å—Ç–∞–≤–ª–µ–Ω TODO.
    """
    try:
        records = controller.db.read_all()  # TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ read_all() –≤ WiFiDB, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    except Exception as exc:
        logger.exception("Failed to read records from DB")
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {exc}")
        await callback.answer()
        return

    if not records:
        await callback.message.answer("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ '–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ'.")
        await callback.answer()
        return

    table_text = _format_records_table(records)
    await callback.message.answer(table_text, reply_markup=get_main_keyboard())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ"
@bot_router.callback_query(F.data == "new_entry")
async def start_new_entry(callback: types.CallbackQuery) -> None:
    """–ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—Å–ª–∞—Ç—å JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –æ WiFi-—Å–µ—Ç–∏."""
    example = (
        '{"bssid": "00:11:22:33:44:55", "frequency": 2412, "rssi": -50, '
        '"ssid": "MyWiFi", "timestamp": 1698115200, "channel_bandwidth": "20MHz", '
        '"capabilities": "WPA2-PSK"}'
    )
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ WiFi-—Å–µ—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n" + example
    )

    # –í –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é ‚Äî —ç—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ,
    # –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë –±–µ–∑–æ–ø–∞—Å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å UX —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
    try:
        await callback.message.bot.set_chat_menu_button(
            chat_id=callback.message.chat.id,
            menu_button=types.MenuButtonCommands(),
        )
    except Exception:
        # –ù–µ —Ñ–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å chat menu button", exc_info=True)

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
@bot_router.message()
async def process_new_entry(message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ JSON-–ø—ç–π–ª–æ–∞–¥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Ç—å —á–µ—Ä–µ–∑ Controller.

    –í —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã —è–≤–Ω–æ –ø–∞—Ä—Å–∏–º JSON –∏ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    `parse_json`, `build_network`, `save_network` —á—Ç–æ–±—ã –∏–º–µ—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–º –∫–æ–¥–æ–º.
    """
    payload_text = message.text or ""

    try:
        data = controller.parse_json(payload_text)
    except ValueError as ve:
        logger.debug("Invalid JSON received from user", exc_info=True)
        await message.answer(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {ve}", reply_markup=get_main_keyboard())
        return

    try:
        network = controller.build_network(data)
    except (KeyError, TypeError, ValueError) as e:
        logger.debug("Invalid network data", exc_info=True)
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ç–∏: {e}", reply_markup=get_main_keyboard())
        return

    try:
        saved = controller.save_network(network)
    except Exception as e:
        logger.exception("DB error when saving network")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}", reply_markup=get_main_keyboard())
        return

    if saved:
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É!", reply_markup=get_main_keyboard())
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î.", reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
@bot_router.callback_query(F.data == "instructions")
async def show_instructions(callback: types.CallbackQuery) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    instructions = textwrap.dedent(
        """
        üìö *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é WiFi Data Bot*

        –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–±–æ—Ä–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ WiFi-—Å–µ—Ç—è—Ö.
        –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ç—è—Ö, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ.

        *–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞:*
        - *–¢–∞–±–ª–∏—Ü–∞*: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ WiFi-—Å–µ—Ç—è—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü—ã.
        - *–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ*: –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é WiFi-—Å–µ—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        - *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è*: –í—ã–≤–æ–¥–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.

        *–ö–∞–∫ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É:*
        1. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ'.
        2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –Ω–∞–ø—Ä–∏–º–µ—Ä:

           ```json
           {"bssid": "00:11:22:33:44:55", "frequency": 2412, "rssi": -50,
            "ssid": "MyWiFi", "timestamp": 1698115200, "channel_bandwidth": "20MHz",
            "capabilities": "WPA2-PSK"}
           ```

        3. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É.

        *–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ:*
        - *SSID*: –ò–º—è WiFi-—Å–µ—Ç–∏.
        - *BSSID*: MAC-–∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞.
        - *–ß–∞—Å—Ç–æ—Ç–∞*: –ß–∞—Å—Ç–æ—Ç–∞ –≤ –ú–ì—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2412 –¥–ª—è 2.4 –ì–ì—Ü).
        - *RSSI*: –£—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –≤ –¥–ë–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, -50).
        - *–ö–∞–Ω–∞–ª*: –®–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20MHz).
        - *–í—Ä–µ–º—è*: –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (Unix timestamp).
        - *–ö–∞–ø–∞–±–∏–ª–∏—Ç–∏*: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, WPA2-PSK).

        –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç JSON –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.
        """
    )

    await callback.message.answer(instructions, parse_mode="Markdown", reply_markup=get_main_keyboard())
    await callback.answer()
